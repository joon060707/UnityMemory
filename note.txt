Unity Note
-: Description
*: Code
->: Procedure


2022/01/20

(C#)
- float < double < decimal
- switch에 object 할당 가능, 각 case에 자료형 할당 가능
            object o = 0;
            switch (o)
            {
                case 1:
                    Console.WriteLine(1);
                    return;
                case float flt:
                    break;
                case double dbl:
                    break;
                case int inte:
                    break;
                case HashSet<int> sets:
                default:
                    break;
            }
- String.Format() 대신 $ 사용 가능
            Console.WriteLine("Some text");
            Console.WriteLine($"Some text with {"value 1"} and {str}, not with {0}", idontno);
            Console.WriteLine("Some text with {0} and {1}, not with valname", notnull, idontno);
- ref vs out(2)
  out으로 설정된 매개변수는 결과값이 저장되지 않으면 오류 발생, ref은 그렇지 않음
  out으로 설정된 매개변수 자리에는 매개변수 자리에서 선언과 동시에 이후부터 이용 가능. 즉 선언 및 사용을 한번에.
- C#은 Python처럼 함수 내에 함수 존재 가능


2022/01/14
- Serialization(직렬화): 에디터 내에서 값을 수정할 수 있도록(정확히는 오브젝트를 문자나 숫자로 변환) 하는 작업
  public 변수 또는 [SerializeField]를 붙인 변수에 적용됨
  [직렬화 가능 변수 유형]
  - int, float, string, bool 등 기본 숫자
  - 열거형 enum: 드랍다운 구현
  - Unity 자체 기본 데이터 타입
    : Vector 시리즈, Quaternion, Color, Rect, Pose 등등
  - 1차원 List
  - 1차원 배열
  - [System.Serializable]을 붙인 새로운 클래스나 구조체(그 안의 변수는 위 타입 중 하나여야 함
  - 이외 Unity 자체 참조 타입은 직접 지정할 수 있도록 표현됨
  
  [직렬화 불가능 유형]
  - Dictionary, HashSet
  - [System.Serializable]가 없는 클래스나 구조체
  - 2차원 이상의 배열이나 List
    - 간접적으로 구현하려면 다음과 같이 해볼 수 있음. 이런 식으로 3차 이상도 가능은 함
        [System.Serializable] public struct string2 { public string[] strings; }
        public string2[] stringMatrix;
  - property 변수
  
  
- Attribute(특성): Inspector에 표시되는 직렬화 변수에 기능을 추가할 수 있음. [CLASS(option)] 형태로 사용
    * [Tooltip("내용")]: 에디터 내 변수에 마우스 올릴시 설명 추가
    * [Range(최소, 최대)]: 숫자 변수에 슬라이더 구현
    * [Header("내용")]: 구분을 위한 제목 추가
    * [HideInInspector]: public 변수 숨기기

- (C#) property: getter와 setter 포함
  type variable{
  get{ return 원하는 값; }
  set{ 원하는 위치 = value; }
  }
- (C#) this: 객체 자기 자신을 나타냄. 동시에 클래스 내부의 어떤 배열 변수를 나타낼 때 사용 가능.
        public string[] strings;
        public string this[int a]
        {
            get { return strings[a]; }
            set { strings[a] = value; }
        }
- (C#) set 내부에서의 value 키워드는 입력받는 값을 의미
- (C#) if 같은 키워드를 변수명으로 쓸 때는 @if처럼 쓰면 됨




2022/01/11

- 게임 이동속도 관련해서는 꼭 deltaTime을 적용해줘야 함!!!
  에디터에서는 0.0008(1250fps) 정도 측정
  실제 빌드에서는 0.013(75fps) 정도 측정
  ex) float barSpeed = gameManager.barSpeed * Time.deltaTime;

-> 핑퐁 게임 충돌 구현
public class Ball : MonoBehaviour
{
    public int speed = 300;
    Rigidbody body;
    Vector3 velocity;
    void Update() { velocity = body.velocity;}
    private void OnCollisionEnter(Collision collision)
    {
        // 충돌 구현 방법
        // indirection: 충돌할 때의 공의 방향 벡터
        // innormal: 충돌한 벽의 표면에 수직인 벡터
        // 반드시 Update에서 기록된 velocity로 계산해야 함. 충돌할 때 순간 속도가 줄어들기 때문.
        Vector3 newDirection = Vector3.Reflect(velocity.normalized, collision.GetContact(0).normal);
        float crashSpeed = velocity.magnitude;
        body.velocity = newDirection * crashSpeed;
    }
}



2022/01/04
- Anchor: 나 자신의 배치를 부모의 어느 지점을 기준으로 측정할 건가? (왼쪽 아래가 X=0, Y=0)
  (Min 지점을 기준으로 우선 측정됨에 유의)
- Pivot(Shift): Anchor의 위치를 나 자신의 어느 지점을 기준으로 측정할 건가?(왼쪽 아래가 X=0, Y=0)
  (만약 Pivot X=1, Y=1이라면 나의 배치는 오른쪽 위 지점이 Anchor 점에 비해 얼마나 떨어져 있는지로 판단.)
  (PosX = width * PivotX + Anchor 점으로부터 측정된 X)
  (PosY = width * PivotY + Anchor 점으로부터 측정된 Y)
- Position(Alt): Anchor 또는 Pivot을 바탕으로 이동(0,0으로 설정함)
- Stretch: Width, Height 대신 Right, Bottom
- 물체 클릭 반응
  OnClick은 UI에만 적용
  OnMouse~~~를 일반 게임 오브젝트에 적용
* Application.Quit(): 앱 종료




2022/01/03
- gameObject.SetActive(): Hierarchy의 게임 오브젝트의 사용 여부(제일 위의 체크박스)
  vs 
  monobehaviour(script, comp...).enabled : 게임 오브젝트에 부착된 스크립트, 컴포넌트의 사용 여부
  (이게 체크되면 OnEnable() 발동)
- AI - Navigation - Bake에서 해당 크기의 오브젝트가 다닐 수 있는 표면(NavMesh) 계산 가능
  NavMeshAgent가 실질적인 AI 이동 에이전트(캐릭터 자체에 부착)
- Collider vs Trigger
  Collider는 실질적인 충돌을 필요로 할 때 사용
  Trigger는 그저 닿았을 때 어떤 결과를 만들기 위해 사용
- Singleton code: 아래와 같이 만들고 외부에서 instance로 이용

    private static CLASS m_instance;
    public static CLASS instance{
        get{
            if (m_instance == null) m_instance = FindObjectOfType<CLASS>();
            return m_instance;
        }
    }

- Button 내 OnClick()
  Object에는 모든 오브젝트가 들어갈 수 있음. (주로 스크립트를 포함하는 게임오브젝트를 선택함)
  Object 선택시 그 오브젝트가 포함하는 구성요소가 클래스 단위로 표시됨
  클래스 내에서 호출하고자 하는 함수 선택하면 됨.
- Mathf 클래스: 간단한 수학 함수 모음
* Mathf.Lerp(a, b, p) = a*(1-p) + b*p
* Quaternion.LookRotation(법선벡터): 법선벡터 방향으로 회전


2021/12/31
- Raycast: position에서 forward 방향으로 rayLength만큼 쏴서 out RayCasthit에 정보 저장. 
- (C#) out: 값으로 갖는 데이터를 참조 형식으로 사용하는 키워드.
  클래스 객체는 자동으로 참조로 이용되지만, int, float, struct 등 값 데이터는 out을 사용해야 참조로 이용 가능. 즉, 일종의 임시 전역변수화 키워드.
  (C#) ref도 비슷한 기능. 단, ref는 초기화 단계 필요. out은 초기화 필요 없음.
- FK(Forward Kinematics): 부모 파트에서 자식 파트로 움직이도록 설정
- IK(Inverse Kinematics): 자식 파트를 먼저 움직이고 거기에 맞게 부모 파트를 움직임.
  IK 사용을 위해 IK Pass를 사용해야 하며 그 호출을 OnAnimatorIK()에서 진행.
- IK Pass: Animator 내 레이어에서 설정. 
- OnAnimatorIK() 내의 작업
  SetIKPosition/RotationWeight(): 가중치 설정(0: 최소, 1: 최대)
  SetIKPosition/Rotation(): 특정 위치에 손발 갖다대기
- (C#) base: java에서의 super과 같은 역할. 부모 클래스 메소드 접근.  
- (C#) virtual: 부모 클래스 함수에 입력하는 키워드로서 자식에서 override할 수 있는 함수.
- (C#) delegate(대표, 대리, 위임): 일종의 함수 포인터. java에서의 함수형 인터페이스와 비슷(같진 않음). 함수를 인자로 받음.
  java Consumer와 C# Action이 비슷하다고 함. 다만 action(t)이냐 consumer.accept(t) 정도 차이?
  Action delegate에 += func 를 붙여 함수(매개변수X) 실행 예약 가능. 괄호 없이 추가됨에 유의.
  delegate에 함수가 추가되지 않은 경우 null임.
  
  [java]
  package testapp;
  public class Lambda {    
    interface IAdd { public int Add(int a, int b); }

    public static void main(String[] args) {        
        IAdd func = (a, b) -> a + b;
        System.out.println(func.Add(10, 20));
    }
  }
  
  [C#]
  using System;
  class Program {
    delegate int AddFunc(int a, int b);

    static void Main(string[] args) {
        AddFunc func = (a, b) => a + b;
        Console.WriteLine(func(10, 20));    
    }
  }
  // Action 대리자는 클래스 내의 함수만 추가할 수 있음.
  // 따라서 외부 함수를 추가하려면 아래와 같이 해야 함.
  // enemy.onDeath += delegate() { enemies.Remove(enemy); };
  // enemy.onDeath += () => { Destroy(enemy.gameObject, 10f); };
  // enemy.onDeath += () => GameManager.instance.AddScore(score);
  



2021/12/30
- (C#) property: getter와 setter를 포함하는 함수형 변수
- Cinemachine: 캐릭터 추적 카메라 만들 때 활용. Cinemachine Brain 컴포넌트와 CM Virtual Camera로 시작.
  Follow에 따라갈 대상, Look At에 비출 대상 선택(사실상 비슷)
  Virtual Camera 내의 설정
    Lens-FoV: 시야각
    Body-Follow Offset: 카메라 (비추는) 위치
    Aim=Tracked Object Offset: 카메라 (비추는) 각도
- Line Renderer: 점들을 잇는 선 그리기
- Coroutine: 코드 처리 중간에 일정 시간 작업 중지(대기)
* Quaternion.Euler(Vector3): Vector3 형식의 회전을 Quaternion으로 변환
* Quaternion 객체의 eulerAngles: Quaternion 형식의 회전을 Vector3으로 변환
* (C#) yield return f(): f()에서 반환되는 IEnumerator 내의 원소들을 하나씩 반환
* yield return new WaitForSeconds(float second): 위 원리를 이용해서 일정 시간 동안 값 반환하며 시간 끌기


2021/12/29
- GameObject(좌측 Hierarchy)가 각 Component를 포함하고 있다고 생각할 것.
- SetActive()는 GameObject의 메소드임에 유의.
- Tag: 각 GameObject들의 종류를 구분하는 표식. 코드 내에서 참조하여 해당 오브젝트들만 고를 수 있음.
- (Box, Sphere, ...) Collider: 다른 게임 오브젝트들과의 충돌을 감지.(OnCollision)
  이때 Collider 내의 is Trigger 체크시 트리거(OnTrigger)로서 사용
- Audio Source: 음악 플레이어. AudioClip: 실제 음악 파일
  그러나 Main Camera 내에 있는 Audio Listener가 활성화되어야 실제로 게임 소리가 들림. Audio Listener은 씬에 1개만 존재해야 함.
- 애니메이션: Animator(Controller)와 Animation 2개 생성하여 Animator 내에서 Animation 실행 시기 설정.
  Parameters 내에서 bool과 trigger의 차이: trigger는 발동될 때만 true가 되고 바로 false 처리, bool은 그런 거 없음
- Rigidbody 주요 코드: AddForce(Vector), position, velocity
- Collider는 GameObject과 같은 일반 개체이고, Collision은 충돌 정보임.(단, Collision 내에 Collider 접근 가능)
- 2D 기준 Sprite Renderer 내 Sorting Layer: 각종 그림들의 정렬 순서 지정
- 오브젝트의 절대적인 크기 체크는 Box Colider 내의 Size를 활용하면 됨.
- Inspector 내의 Overrides: Prefabs에서 갖고 와서 수정한 GameObject를 다시 Prefabs에 덮어쓸 때 사용(Apply All)
* Awake()는 Start() 한 프레임 전에 실행.
* OnEnable()은 이 GameObject 내의 해당 스크립트 컴포넌트가 체크(Enable)될 때 발동.
  따라서 GameObject가 SetActive(true)될 때도 발동.
* SceneManager.GetActiveScene(): 현재 열린 씬(name으로 이름 획득 가능)
* (C#) string.Format(format, args)
  format: {순서 , (-는 좌측 정렬)최소 너비 : 서식(F이면 숫자는 소수점 자리)}
  서식: D, X, N, F, E 등등 (문자열은 서식 자리 생략)
  ex) Debug.Log(string.Format("{0:-8} {1,10:D}", "Hello", 5678));  -> Hello         5678
  
  참고: https://docs.microsoft.com/ko-kr/dotnet/standard/base-types/standard-numeric-format-strings
  참고: https://docs.microsoft.com/ko-kr/dotnet/api/system.string.format?view=net-6.0


2021/12/28
- 유니티 내의 컴포넌트(Transform, Rigidbody...)는 C# 스크립트에서 클래스로서 사용 가능
- 스크립트는 사실 어떤 GameObject(Plane, Sphere, Cube, Camera...)에도 넣을 수 있음
- 스크립트 내의 public 필드는 유니티 내에서 입력 가능
- Rigidbody: 물리적 특성 부여.
- (C#) struct는 C에서와 같이 참조 형식이 아닌 실제 값 형식으로 저장함. 하지만 C#에서는 클래스처럼 메소드도 포함 가능.
  선언만 해도 생성됨(단, 매개변수 없는 생성자로는 생성 불가)
- MonoBehaviour 클래스 내에는 이 스크립트를 추가한 개체 자기 자신을 가리키는 gameObject 변수가 있음.
- OnCollision, OnTrigger 등의 메소드는 입력하여 사용하기만 하면 됨(on 입력 후 선택하여 엔터 치면 자동 완성)
* Input.GetKey(KeyCode.[ARROW]): 키보드 키 입력
* Input.GetAxis(string): Project Settings - Input Manager 내의 각종 축 이름 중 하나를 선택하여 1 또는 -1로 입력 받음
* gameObject.SetActive([T/F]): 자기 자신 활성화 여부
* (this. 또는 gameObject. 또는 생략)GetComponent<ClassType>(): 자기 자신에 들어 있는 컴포넌트(ClassType 타입) 얻기. 안드로이드의 findViewById()라고 생각하면 됨.
* Time.deltaTime: 시간 변화량, 즉 1프레임당 시간 반환(60fps이면 1/60)
* transform.Translate(Vector): 해당 벡터값만큼 이동
* Instantiate(GameObject obj(, transform.position, transform.rotation)): 특정 게임오브젝트 생성(복제)
* Destroy(GameObject obj, float time): 특정 게임오브젝트 일정 시간 후(또는 즉시) 삭제(obj에 자기 자신 넣으면 자기 자신 삭제)
* (using UnityEngine.SceneManagement;) SceneManager.LoadScene(string scenename): 특정 씬 열기(기존 씬은 삭제)
