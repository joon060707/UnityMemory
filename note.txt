Unity Note
-: Description
*: Code
->: Procedure


2021/12/31
- Raycast: position에서 forward 방향으로 rayLength만큼 쏴서 out RayCasthit에 정보 저장. 
- out: 값으로 갖는 데이터를 참조 형식으로 사용하는 키워드.
  클래스 객체는 자동으로 참조로 이용되지만, int, float, struct 등 값 데이터는 out을 사용해야 참조로 이용 가능. 즉, 일종의 임시 전역변수화 키워드.
  ref도 비슷한 기능. 단, ref는 초기화 단계 필요. out은 초기화 필요 없음.




2021/12/30
- (C#) property: getter와 setter를 포함하는 함수형 변수
- Cinemachine: 캐릭터 추적 카메라 만들 때 활용. Cinemachine Brain 컴포넌트와 CM Virtual Camera로 시작.
  Follow에 따라갈 대상, Look At에 비출 대상 선택(사실상 비슷)
  Virtual Camera 내의 설정
    Lens-FoV: 시야각
    Body-Follow Offset: 카메라 (비추는) 위치
    Aim=Tracked Object Offset: 카메라 (비추는) 각도
- Line Renderer: 점들을 잇는 선 그리기
- Coroutine: 코드 처리 중간에 일정 시간 작업 중지(대기)
* Quaternion.Euler(Vector3): Vector3 형식의 회전을 Quaternion으로 변환
* Quaternion 객체의 eulerAngles: Quaternion 형식의 회전을 Vector3으로 변환
* (C#) yield return f(): f()에서 반환되는 IEnumerator 내의 원소들을 하나씩 반환
* yield return new WaitForSeconds(float second): 위 원리를 이용해서 일정 시간 동안 값 반환하며 시간 끌기


2021/12/29
- GameObject(좌측 Hierarchy)가 각 Component를 포함하고 있다고 생각할 것.
- SetActive()는 GameObject의 메소드임에 유의.
- Tag: 각 GameObject들의 종류를 구분하는 표식. 코드 내에서 참조하여 해당 오브젝트들만 고를 수 있음.
- (Box, Sphere, ...) Collider: 다른 게임 오브젝트들과의 충돌을 감지.(OnCollision)
  이때 Collider 내의 is Trigger 체크시 트리거(OnTrigger)로서 사용
- Audio Source: 음악 플레이어. AudioClip: 실제 음악 파일
  그러나 Main Camera 내에 있는 Audio Listener가 활성화되어야 실제로 게임 소리가 들림. Audio Listener은 씬에 1개만 존재해야 함.
- 애니메이션: Animator(Controller)와 Animation 2개 생성하여 Animator 내에서 Animation 실행 시기 설정.
  Parameters 내에서 bool과 trigger의 차이: trigger는 발동될 때만 true가 되고 바로 false 처리, bool은 그런 거 없음
- Rigidbody 주요 코드: AddForce(Vector), position, velocity
- Collider는 GameObject과 같은 일반 개체이고, Collision은 충돌 정보임.(단, Collision 내에 Collider 접근 가능)
- 2D 기준 Sprite Renderer 내 Sorting Layer: 각종 그림들의 정렬 순서 지정
- 오브젝트의 절대적인 크기 체크는 Box Colider 내의 Size를 활용하면 됨.
- Inspector 내의 Overrides: Prefabs에서 갖고 와서 수정한 GameObject를 다시 Prefabs에 덮어쓸 때 사용(Apply All)
* Awake()는 Start() 한 프레임 전에 실행.
* OnEnable()은 이 GameObject 내의 해당 스크립트 컴포넌트가 체크(Enable)될 때 발동.
  따라서 GameObject가 SetActive(true)될 때도 발동.
* SceneManager.GetActiveScene(): 현재 열린 씬(name으로 이름 획득 가능)
* (C#) string.Format(format, args)
  format: {순서 : (-는 좌측 정렬)최소 너비 : 서식}
  서식: D, X, N, F, E 등등 (문자열은 서식 자리 생략)
  ex) Debug.Log(string.Format("{0:-8} {1:10:D}", "Hello", 5678));  -> Hello         5678


2021/12/28
- 유니티 내의 컴포넌트(Transform, Rigidbody...)는 C# 스크립트에서 클래스로서 사용 가능
- 스크립트는 사실 어떤 GameObject(Plane, Sphere, Cube, Camera...)에도 넣을 수 있음
- 스크립트 내의 public 필드는 유니티 내에서 입력 가능
- Rigidbody: 물리적 특성 부여.
- (C#) struct는 C에서와 같이 참조 형식이 아닌 실제 값 형식으로 저장함. 하지만 C#에서는 클래스처럼 메소드도 포함 가능.
  선언만 해도 생성됨(단, 매개변수 없는 생성자로는 생성 불가)
- MonoBehaviour 클래스 내에는 이 스크립트를 추가한 개체 자기 자신을 가리키는 gameObject 변수가 있음.
- OnCollision, OnTrigger 등의 메소드는 입력하여 사용하기만 하면 됨(on 입력 후 선택하여 엔터 치면 자동 완성)
* Input.GetKey(KeyCode.[ARROW]): 키보드 키 입력
* Input.GetAxis(string): Project Settings - Input Manager 내의 각종 축 이름 중 하나를 선택하여 1 또는 -1로 입력 받음
* gameObject.SetActive([T/F]): 자기 자신 활성화 여부
* (this. 또는 gameObject. 또는 생략)GetComponent<ClassType>(): 자기 자신에 들어 있는 컴포넌트(ClassType 타입) 얻기  
* Time.deltaTime: 시간 변화량, 즉 1프레임당 시간 반환(60fps이면 1/60)
* transform.Translate(Vector): 해당 벡터값만큼 이동
* Instantiate(GameObject obj(, transform.position, transform.rotation)): 특정 게임오브젝트 생성(복제)
* Destroy(GameObject obj, float time): 특정 게임오브젝트 일정 시간 후(또는 즉시) 삭제(obj에 자기 자신 넣으면 자기 자신 삭제)
* (using UnityEngine.SceneManagement;) SceneManager.LoadScene(string scenename): 특정 씬 열기(기존 씬은 삭제)
